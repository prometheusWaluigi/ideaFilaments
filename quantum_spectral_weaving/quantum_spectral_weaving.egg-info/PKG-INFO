Metadata-Version: 2.2
Name: quantum_spectral_weaving
Version: 0.1.0
Summary: fr fr this package implements quantum spectral weaving for the riemann hypothesis NO CAP
Home-page: https://github.com/prometheusWaluigi/ideaFilaments
Author: prometheusWaluigi
Author-email: quantum@weaving.fr.fr
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Science/Research
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Topic :: Scientific/Engineering :: Mathematics
Classifier: Topic :: Scientific/Engineering :: Physics
Description-Content-Type: text/markdown
Requires-Dist: torch>=1.9.0
Requires-Dist: numpy>=1.19.2
Requires-Dist: scipy>=1.7.0
Dynamic: author
Dynamic: author-email
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: home-page
Dynamic: requires-dist
Dynamic: summary

# Quantum Spectral Weaving

*Exploring quantum dynamics inspired by the Riemann Hypothesis and topological protection.*

## Overview

This repository implements a quantum simulation framework exploring concepts inspired by the Riemann Hypothesis, topological quantum field theory, and the Kardar-Parisi-Zhang (KPZ) equation. The code uses a custom `ComplexTensor` class to represent quantum states and implements a "quantum protection stack" to enhance robustness against simulated noise and decoherence.

**Note:** The connection to the Riemann Hypothesis is *conceptual*. This code does not directly prove or disprove the hypothesis. It uses mathematical structures and ideas *inspired* by the Riemann zeta function and related concepts.

## Installation

```bash
pip install git+https://github.com/prometheusWaluigi/ideaFilaments.git#subdirectory=quantum_spectral_weaving
```

## Usage

```python
from quantum_spectral_weaving.src.quantum_spectral_weaving import QuantumSpectralWeaving, RiemannQuantumDynamics
from quantum_spectral_weaving.src.spectral_weaving import SpectralWeavingConfig
from quantum_spectral_weaving.src.riemann_dynamics import RiemannDynamicsConfig

# --- Example 1: Spectral Weaving ---
# Configure the spectral weaving parameters
config = SpectralWeavingConfig(
    max_zeros=10,
    max_eigenvalues=10,
    coupling_strength=0.28,
    kpz_viscosity=0.3,
    kpz_nonlinearity=1.6,
)

# Create a QuantumSpectralWeaving instance
weaver = QuantumSpectralWeaving(config)

# Compute (placeholder) Riemann zeros and eigenvalues
zeros = weaver.compute_riemann_zeros()
eigenvalues = weaver.compute_eigenvalues()

# Weave spectral patterns (placeholder)
pattern = weaver.weave_spectral_patterns()

# Analyze quantum statistics
stats = weaver.analyze_quantum_statistics()
print("Quantum Statistics:", stats)

# --- Example 2: Riemann Quantum Dynamics ---

# Configure the Riemann dynamics
rd_config = RiemannDynamicsConfig(
    max_states=100,
    time_steps=20,
    coupling_strength=0.2,
    kpz_viscosity=0.2,
    kpz_nonlinearity=1.5,
)

# Create a RiemannQuantumDynamics instance
dynamics = RiemannQuantumDynamics(rd_config)

# Evolve the quantum system
dynamics.evolve()

# Analyze evolution metrics
metrics = dynamics.analyze_evolution_metrics()
print("Evolution Metrics:", metrics)

# Extract convergence statistics
convergence_stats = dynamics.extract_convergence_stats()
print("Convergence Statistics:", convergence_stats)
```

## Running Tests

```bash
cd quantum_spectral_weaving
python -m unittest discover tests
```
or
```bash
cd quantum_spectral_weaving
pytest tests/ -v
```

## Dependencies

-   torch>=1.9.0
-   numpy>=1.19.2
-   scipy>=1.7.0

## Project Structure

-   `src/`: Source code for the quantum simulation.
    -   `__init__.py`: Package initialization.
    -   `complextensor.py`: Implementation of the `ComplexTensor` class.
    -   `quantum_spectral_weaving.py`: Core logic for spectral weaving.
    -   `riemann_dynamics.py`: Quantum dynamics inspired by the Riemann zeta function.
    -   `spectral_weaving.py`: Configuration for spectral weaving.
    -   `gauge_field.py`: Gauge field coupling for quantum protection.
    -   `kpz_enhanced.py`: Enhanced KPZ dynamics for quantum protection.
    -   `quantum_shield.py`: Active error suppression.
    -   `su2_protect.py`: SU(2) gauge field protection.
    -   `bootstrap.py`: Quantum bootstrapping procedure.
    -   `types.py`: Type hints.
-   `tests/`: Unit tests.
    -   `test_quantum_stack.py`: Combined and improved tests.
-   `README.md`: This file.
- `setup.py`: setuptools configuration
- `setup_quantum_env.bat`: Batch script to create a Conda environment.
- `setup_env.ps1`: PowerShell script to create a Conda environment.
- `setup_oneapi.ps1`: PowerShell script to set up the environment with Intel oneAPI.

## License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details (you'll need to create a LICENSE file).

## Status

This project is currently in an **alpha** state. The core structure is in place, but many of the algorithms are simplified placeholders. Future work will involve implementing more accurate and physically realistic versions of these algorithms.
